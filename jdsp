#!/usr/bin/env bash
#Noah Bliss

# quick mod of this script to test my jdsp plugin
# if someone reads this: feel free to send a PR with an optimized script for jdsp4linux (+compatibility for V4L)
# ~thepbone
configpath=$HOME/.config/jamesdsp
fallbackconfigpath=/etc/jamesdsp
if ! [ -d "$configpath" ]; then configpath="$fallbackconfigpath"; fi
audiofile=$configpath/audio.conf
devicefile=$configpath/devices.conf
tmppath=/tmp/jamesdsp
idfile=$tmppath/sinkid.tmp
if [ -f $idfile ]; then oldid=$(< $idfile); fi
pidfile=$tmppath/pid.tmp
if [ -f $pidfile ]; then pid=$(< $pidfile); fi
logfile=$tmppath/jdsp.log
vipersink=jdsp
mkdir -p $configpath
mkdir -p $tmppath
# Make $configpath the working directory. This allows IRS and similar files to be referenced in configs without needing a path prefix. 
cd "$configpath"


start () {
	stop
	if [ -f $devicefile ]; then 
		declare $(head -n1 $devicefile) #get location and desc from file	else
		#Do our best.
		location=$(pactl info | grep "Default Sink" | awk -F ": " '{print $2}')
		if [ "$location" == "$vipersink" ]; then echo "Something is very wrong (Target is same as our jdspsink name)."; return; fi
	fi
	idnum=$(pactl load-module module-null-sink sink_name=$vipersink sink_properties=device.description="JDSP4Linux")
	echo $idnum > $idfile
	echo "Setting original sink to full volume..."
	pactl set-sink-volume $location 1.0
	echo "Changing primary sink to JDSP..."
	pactl set-default-sink $vipersink
	source $audiofile
	gst-launch-1.0 -v pulsesrc device=$vipersink.monitor volume=1.0 \
	! jdspfx enable="$enable" analogmodelling-enable="$analogmodelling_enable" analogmodelling-tubedrive="$analogmodelling_tubedrive" bass-enable="$bass_enable" bass-mode="$bass_mode" bass-filtertype="$bass_filtertype" bass-freq="$bass_freq" headset-enable="$headset_enable" headset-osf="$headset_osf" headset-reflection-amount="$headset_reflection_amount" headset-finalwet="$headset_finalwet" headset-finaldry="$headset_finaldry" headset-reflection-factor="$headset_reflection_factor" headset-reflection-width="$headset_reflection_width" headset-width="$headset_width" headset-wet="$headset_wet" headset-lfo-wander="$headset_lfo_wander" headset-bassboost="$headset_bassboost" headset-lfo-spin="$headset_lfo_spin" headset-decay="$headset_decay" headset-delay="$headset_delay" headset-lpf-input="$headset_lpf_input" headset-lpf-bass="$headset_lpf_bass" headset-lpf-damp="$headset_lpf_damp" headset-lpf-output="$headset_lpf_output" stereowide-enable="$stereowide_enable" stereowide-scoeff="$stereowide_scoeff" stereowide-mcoeff="$stereowide_mcoeff" bs2b-enable="$bs2b_enable" bs2b-fcut="$bs2b_fcut" bs2b-feed="$bs2b_feed" compression-enable="$compression_enable" compression-pregain="$compression_pregain" compression-threshold="$compression_threshold" compression-knee="$compression_knee" compression-ratio="$compression_ratio" compression-attack="$compression_attack" compression-release="$compression_release" tone-enable="$tone_enable" tone-filtertype="$tone_filtertype"  tone-eq="$tone_eq" masterswitch-limthreshold="$masterswitch_limthreshold" masterswitch-limrelease="$masterswitch_limrelease" ddc-enable="$ddc_enable" ddc-file="$ddc_file" convolver-enable="$convolver_enable" convolver-gain="$convolver_gain" convolver-file="$convolver_file" \
        ! pulsesink device="$location" > $logfile &
	echo $! > $pidfile
	echo "Moving existing audio streams to JDSP..."
	while read existing_sink; do pactl move-sink-input $existing_sink $vipersink; done < <(pactl list sink-inputs short | awk '{print $1}')
}

stop () {
        if [ -f $pidfile ]; then
		if ps -p $pid &>/dev/null; then kill $pid; murdercanary="Killed process."; else murdercanary="Looks like it was already dead...?"; fi
		rm $pidfile && pidcanary="Deleted pidfile."
		echo "$murdercanary $pidcanary"
        fi
        if [ -f $idfile ]; then
                pactl unload-module $oldid
		rm $idfile
		echo "Unloaded JDSP sink."
        fi
}

restart () {
	start
}

status () {
	if [ -f $pidfile ]; then pidfilestatus="There is a pidfile.";
		if ps -p $pid &>/dev/null; then
			pidstatus="There is also a process running at pid $pid."
			running="[RUNNING]"; else
			pidstatus="However, there is no process running with the expected pid."
			running="[ERROR]"
		fi; else
		pidfilestatus="No process."
		running="[STOPPED]"
	fi
	if [ -f $idfile ]; then
		idfilestatus="There is an idfile. The JDSP sink seems to be loaded at id: $oldid."; else
		idfilestatus="No idfile found."
	fi
	echo "$running"
	echo "$pidfilestatus $pidstatus"
	echo "$idfilestatus"
}
$@
